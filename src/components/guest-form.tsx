'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { toast } from 'sonner'
import { WeddingConfig } from '@/lib/wedding-data'
import { Upload, X, Camera, FileImage, Video, Sparkles, Calendar, Image as ImageIcon } from 'lucide-react'
import Link from 'next/link'

interface GuestFormProps {
  wedding: WeddingConfig
}

export function GuestForm({ wedding }: GuestFormProps) {
  const [loading, setLoading] = useState(false)
  const [selectedFiles, setSelectedFiles] = useState<File[]>([])
  const [guestName, setGuestName] = useState('')
  const [message, setMessage] = useState('')

  function handleFileSelect(event: React.ChangeEvent<HTMLInputElement>) {
    const files = Array.from(event.target.files || [])
    const maxFiles = 5
    const maxFileSize = 10 * 1024 * 1024 // 10MB –ø–æ —Ñ–∞—ò–ª
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –≥–æ–ª–µ–º–∏–Ω–∞ –Ω–∞ —Å–µ–∫–æ—ò —Ñ–∞—ò–ª
    const oversizedFiles = files.filter(file => file.size > maxFileSize)
    const validFiles = files.filter(file => file.size <= maxFileSize)
    
    if (oversizedFiles.length > 0) {
      const names = oversizedFiles.map(f => 
        `${f.name} (${formatFileSize(f.size)})`
      ).join(', ')
      
      toast.error(`üìÅ –§–∞—ò–ª–æ–≤–∏—Ç–µ —Å–µ –ø—Ä–µ–≥–æ–ª–µ–º–∏ (–º–∞–∫—Å–∏–º—É–º 10MB –ø–æ —Ñ–∞—ò–ª): ${names}`, {
        duration: 5000
      })
      
      if (validFiles.length === 0) {
        event.target.value = ''
        return
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏ —Ç–µ–∫–æ–≤–µ–Ω –±—Ä–æ—ò + –≤–∞–ª–∏–¥–Ω–∏ –¥–∞—Ç–æ—Ç–µ–∫–∏
    const totalFiles = selectedFiles.length + validFiles.length
    
    if (totalFiles > maxFiles) {
      // –ü—Ä–µ—Å–º–µ—Ç–∞—ò –∫–æ–ª–∫—É –¥–∞—Ç–æ—Ç–µ–∫–∏ –º–æ–∂–∞—Ç –¥–∞ —Å–µ –¥–æ–¥–∞–¥–∞—Ç
      const remainingSlots = maxFiles - selectedFiles.length
      
      if (remainingSlots <= 0) {
        toast.error(`üìã –õ–∏–º–∏—Ç–æ—Ç –µ ${maxFiles} –¥–∞—Ç–æ—Ç–µ–∫–∏ –æ–¥–µ–¥–Ω–∞—à! –ò—Å–ø—Ä–∞—Ç–µ—Ç–µ –≥–æ –º–æ–º–µ–Ω—Ç–æ—Ç, –ø–∞ –¥–æ–¥–∞—ò—Ç–µ –ø–æ–≤–µ—ú–µ. üòä`)
        event.target.value = ''
        return
      }
      
      // –î–æ–¥–∞—ò —Å–∞–º–æ –¥–æ–∑–≤–æ–ª–µ–Ω –±—Ä–æ—ò
      const allowedFiles = validFiles.slice(0, remainingSlots)
      const rejectedCount = validFiles.length - allowedFiles.length
      
      setSelectedFiles(prev => [...prev, ...allowedFiles])
      
      let message = `üìã –î–æ–¥–∞–¥–µ–Ω–∏ ${allowedFiles.length} –¥–∞—Ç–æ—Ç–µ–∫–∏.`
      if (rejectedCount > 0) {
        message += ` ${rejectedCount} —Å–µ –ø—Ä–µ—Å–∫–æ–∫–Ω–∞—Ç–∏ (–ª–∏–º–∏—Ç: ${maxFiles}).`
      }
      if (oversizedFiles.length > 0) {
        message += ` ${oversizedFiles.length} —Å–µ –ø—Ä–µ–≥–æ–ª–µ–º–∏.`
      }
      message += ` –ò—Å–ø—Ä–∞—Ç–µ—Ç–µ –≥–æ –º–æ–º–µ–Ω—Ç–æ—Ç, –ø–∞ –¥–æ–¥–∞—ò—Ç–µ –≥–∏ –æ—Å—Ç–∞–Ω–∞—Ç–∏—Ç–µ! üéâ`
      
      toast.warning(message, { duration: 5000 })
    } else {
      // –°√® –µ –≤–æ —Ä–µ–¥, –¥–æ–¥–∞—ò –≥–∏ –≤–∞–ª–∏–¥–Ω–∏—Ç–µ
      setSelectedFiles(prev => [...prev, ...validFiles])
      
      if (validFiles.length > 0) {
        toast.success(`üì∏ –î–æ–¥–∞–¥–µ–Ω–∏ ${validFiles.length} –¥–∞—Ç–æ—Ç–µ–∫–∏! –í–∫—É–ø–Ω–æ: ${totalFiles}`)
      }
      
      if (oversizedFiles.length > 0) {
        toast.warning(`‚ö†Ô∏è ${oversizedFiles.length} —Ñ–∞—ò–ª–æ–≤–∏ —Å–µ –ø—Ä–µ—Å–∫–æ–∫–Ω–∞—Ç–∏ –ø–æ—Ä–∞–¥–∏ –≥–æ–ª–µ–º–∏–Ω–∞ (–Ω–∞–¥ 10MB)`, {
          duration: 4000
        })
      }
    }
    
    // –†–µ—Å–µ—Ç–∏—Ä–∞—ò –≥–æ input –∑–∞ –¥–∞ –º–æ–∂–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–∞ —Å–µ –∏–∑–±–∏—Ä–∞–∞—Ç –∏—Å—Ç–∏ –¥–∞—Ç–æ—Ç–µ–∫–∏
    event.target.value = ''
  }

  function removeFile(index: number) {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index))
  }

  function formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  function getFileIcon(fileType: string) {
    if (fileType.startsWith('video/')) return <Video className="h-4 w-4 text-amber-600" />
    return <FileImage className="h-4 w-4 text-yellow-600" />
  }

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setLoading(true)

    console.log('üöÄ –§–æ—Ä–º–∞ —Å–µ –∏—Å–ø—Ä–∞—ú–∞...')
    console.log('üë§ –ì–æ—Å—Ç:', guestName)
    console.log('üíå –ü–æ—Ä–∞–∫–∞:', message)
    console.log('üìÅ –ë—Ä–æ—ò –Ω–∞ —Ñ–∞—ò–ª–æ–≤–∏:', selectedFiles.length)

    try {
      const formData = new FormData()
      formData.append('weddingSlug', wedding.slug)
      formData.append('guestName', guestName)
      formData.append('message', message)
      
      selectedFiles.forEach(file => {
        formData.append('files', file)
      })

      console.log('üì§ –ò—Å–ø—Ä–∞—ú–∞–º –¥–æ API...')

      const response = await fetch('/api/send-moment', {
        method: 'POST',
        body: formData
      })

      console.log('üì• Response status:', response.status)

      const result = await response.json()
      console.log('üìã Response data:', result)

      if (result.success) {
        toast.success(`üéâ –í–∞—à–∏–æ—Ç –º–æ–º–µ–Ω—Ç –µ –∏—Å–ø—Ä–∞—Ç–µ–Ω –¥–æ ${wedding.coupleNames}!`)
        
        // –†–µ—Å–µ—Ç–∏—Ä–∞—ò –≥–∏ –ø–æ–ª–∏—ö–∞—Ç–∞
        setGuestName('')
        setMessage('')
        setSelectedFiles([])
        
        // –†–µ—Å–µ—Ç–∏—Ä–∞—ò –≥–æ –∏ HTML —Ñ–æ—Ä–º–æ—Ç
        const form = event.currentTarget
        if (form) {
          form.reset()
        }
      } else {
        throw new Error(result.error || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞—ú–∞—ö–µ')
      }
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞:', error)
      toast.error(error instanceof Error ? error.message : "–°–µ –ø–æ—ò–∞–≤–∏ –Ω–µ–æ—á–µ–∫—É–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞")
    } finally {
      setLoading(false)
    }
  }

  return (
    <div 
      className="min-h-screen flex items-center justify-center p-4 relative bg-cover bg-center bg-no-repeat"
      style={{ 
        backgroundImage: 'url(/image.png)',
        backgroundColor: '#f8f6f3' // fallback –∫—Ä–µ–º–∞—Å—Ç–∞ –±–æ—ò–∞
      }}
    >
      {/* Overlay –∑–∞ –ø–æ–¥–æ–±—Ä–∞ —á–∏—Ç–ª–∏–≤–æ—Å—Ç */}
      <div className="absolute inset-0 bg-gradient-to-br from-amber-50/80 via-stone-50/80 to-yellow-50/80"></div>

      {/* Floating decorations */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none z-10">
        <div className="absolute top-20 left-20 text-amber-300 animate-pulse text-4xl">‚ú®</div>
        <div className="absolute top-40 right-32 text-yellow-300 animate-bounce text-3xl">üì∏</div>
        <div className="absolute bottom-32 left-16 text-amber-300 animate-pulse text-2xl">üåü</div>
        <div className="absolute bottom-20 right-20 text-yellow-300 animate-bounce text-3xl">üéâ</div>
      </div>

      <Card className="w-full max-w-lg shadow-2xl border-0 bg-white/95 backdrop-blur-sm relative z-20">
        {/* Decorative border */}
        <div className="absolute inset-0 bg-gradient-to-r from-amber-300 via-yellow-300 to-amber-400 rounded-lg opacity-20 blur-sm"></div>
        
        <CardHeader className="text-center relative">
          <div className="mx-auto mb-4 p-4 bg-gradient-to-br from-amber-50 to-yellow-50 rounded-full w-fit shadow-lg">
            <Camera className="h-10 w-10 text-amber-600 animate-pulse" />
          </div>
          
          <CardTitle className="text-3xl font-bold bg-gradient-to-r from-amber-700 to-yellow-700 bg-clip-text text-transparent">
            {wedding.title}
          </CardTitle>
          
          <CardDescription className="text-stone-600 text-lg leading-relaxed">
            {wedding.description || '–°–ø–æ–¥–µ–ª–µ—Ç–µ –≥–∏ –≤–∞—à–∏—Ç–µ –Ω–∞—ò—É–±–∞–≤–∏ –º–æ–º–µ–Ω—Ç–∏ –æ–¥ –Ω–∞—Å—Ç–∞–Ω–æ—Ç!'}
          </CardDescription>
          
          <div className="flex items-center justify-center gap-2 text-sm text-stone-500 bg-stone-50 px-4 py-2 rounded-full">
            <Calendar className="h-4 w-4" />
            <span className="font-medium">üìÖ {wedding.date}</span>
          </div>

          {/* –ì–∞–ª–µ—Ä–∏—ò–∞ –∫–æ–ø—á–µ */}
          <div className="mt-6">
            <Link 
              href={`/wedding/${wedding.slug}/gallery`}
              className="w-full h-12 text-lg font-semibold bg-gradient-to-r from-amber-500 via-yellow-500 to-amber-600 hover:from-amber-600 hover:via-yellow-600 hover:to-amber-700 text-white shadow-xl hover:shadow-2xl transform hover:scale-[1.02] transition-all duration-200 rounded-xl flex items-center justify-center gap-3"
            >
              <ImageIcon className="h-5 w-5" />
              –ü–æ–≥–ª–µ–¥–Ω–µ—Ç–µ —ò–∞ –≥–∞–ª–µ—Ä–∏—ò–∞—Ç–∞ –æ–¥ –≥–æ—Å—Ç–∏—Ç–µ
            </Link>
          </div>
        </CardHeader>
        
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-6 relative">
            <div className="space-y-2">
              <Label htmlFor="guestName" className="text-base font-semibold text-stone-700">
                ‚ú® –í–∞—à–µ—Ç–æ –∏–º–µ *
              </Label>
              <Input 
                id="guestName" 
                name="guestName" 
                placeholder="–ò–º–µ –∏ –ü—Ä–µ–∑–∏–º–µ" 
                required 
                value={guestName}
                onChange={(e) => setGuestName(e.target.value)}
                className="h-12 text-lg border-2 border-amber-200 focus:border-amber-400 rounded-xl"
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="message" className="text-base font-semibold text-stone-700">
                üíå –ü–æ—Ä–∞–∫–∞ –¥–æ {wedding.coupleNames}
              </Label>
              <Textarea 
                id="message" 
                name="message" 
                placeholder="–ù–∞–ø–∏—à–µ—Ç–µ —É–±–∞–≤–∞ –ø–æ—Ä–∞–∫–∞..." 
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                className="min-h-[100px] text-lg border-2 border-amber-200 focus:border-amber-400 rounded-xl resize-none"
              />
            </div>
            
            <div className="space-y-3">
              <Label htmlFor="files" className="text-base font-semibold text-stone-700">
                üì∏ –ü—Ä–∏–∫–∞—á–∏ –æ–≤–¥–µ*
              </Label>
              
              <div className="relative">
                <Input 
                  id="files" 
                  type="file" 
                  accept="image/*,video/*" 
                  multiple
                  onChange={handleFileSelect}
                  className="h-12 border-2 border-dashed border-amber-300 hover:border-amber-400 rounded-xl cursor-pointer file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-amber-50 file:text-amber-700 hover:file:bg-amber-100"
                />
                <Camera className="absolute right-3 top-3 h-6 w-6 text-amber-400 pointer-events-none" />
              </div>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞ –ª–∏–º–∏—Ç */}
              <div className="text-sm text-center">
                <span className={`font-medium px-3 py-1 rounded-full ${
                  selectedFiles.length >= 5 
                    ? 'bg-red-100 text-red-700' 
                    : 'bg-blue-100 text-blue-700'
                }`}>
                  üìã {selectedFiles.length}/5 –¥–∞—Ç–æ—Ç–µ–∫–∏ –∏–∑–±—Ä–∞–Ω–∏
                </span>
                {selectedFiles.length >= 5 && (
                  <p className="text-red-600 mt-2 bg-red-50 p-2 rounded-lg">
                    üí° –ò—Å–ø—Ä–∞—Ç–µ—Ç–µ –≥–æ –º–æ–º–µ–Ω—Ç–æ—Ç –∑–∞ –¥–∞ –¥–æ–¥–∞–¥–µ—Ç–µ –ø–æ–≤–µ—ú–µ –¥–∞—Ç–æ—Ç–µ–∫–∏!
                  </p>
                )}
              </div>
              
              <p className="text-sm text-stone-500 bg-yellow-50 p-3 rounded-lg border-l-4 border-yellow-400">
                üí° –ú–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–∏–∫–∞—á–∏—Ç–µ –¥–æ 5 –¥–∞—Ç–æ—Ç–µ–∫–∏ –æ–¥–µ–¥–Ω–∞—à (–¥–æ 10MB). –ê–∫–æ –∏–º–∞—Ç–µ –ø–æ–≤–µ—ú–µ, —Å–ª–æ–±–æ–¥–Ω–æ –ø–æ–¥–µ–ª–µ—Ç–µ –≥–∏ –≤–æ –ø–æ–≤–µ—ú–µ –ø–æ—Ä–∞–∫–∏!
              </p>

              <br />
              
              {selectedFiles.length > 0 && (
                <div className="mt-4 space-y-3">
                  <div className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5 text-amber-600" />
                    <p className="text-base font-semibold text-stone-700">
                      –°–µ–ª–µ–∫—Ç–∏—Ä–∞–Ω–∏ –¥–∞—Ç–æ—Ç–µ–∫–∏ ({selectedFiles.length}):
                    </p>
                  </div>
                  
                  <div className="space-y-2 max-h-40 overflow-y-auto">
                    {selectedFiles.map((file, index) => (
                      <div key={index} className="flex items-center justify-between bg-gradient-to-r from-stone-50 to-amber-50 p-3 rounded-lg border border-stone-200 hover:shadow-md transition-shadow">
                        <div className="flex items-center gap-3 flex-1 min-w-0">
                          {getFileIcon(file.type)}
                          <div className="min-w-0 flex-1">
                            <p className="text-sm font-medium text-stone-800 truncate">{file.name}</p>
                            <p className="text-xs text-stone-500">{formatFileSize(file.size)}</p>
                          </div>
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeFile(index)}
                          className="text-red-500 hover:text-red-700 hover:bg-red-50 shrink-0"
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </CardContent>
          
          <CardFooter className="flex flex-col gap-4 relative">
            <Button 
              type="submit" 
              className="w-full h-14 text-lg font-semibold bg-gradient-to-r from-amber-500 via-yellow-500 to-amber-600 hover:from-amber-600 hover:via-yellow-600 hover:to-amber-700 text-white shadow-xl hover:shadow-2xl transform hover:scale-[1.02] transition-all duration-200 rounded-xl" 
              disabled={loading || selectedFiles.length === 0}
            >
              {loading ? (
                <>
                  <Upload className="mr-3 h-5 w-5 animate-spin" />
                  –ò—Å–ø—Ä–∞—ú–∞–º –¥–æ {wedding.coupleNames}...
                </>
              ) : (
                <>
                  <Camera className="mr-3 h-5 w-5 animate-pulse" />
                  –ò—Å–ø—Ä–∞—Ç–∏ –º–æ–º–µ–Ω—Ç
                </>
              )}
            </Button>
            
            <div className="text-center bg-gradient-to-r from-amber-50 to-yellow-50 p-4 rounded-xl border border-amber-200">
              <p className="text-sm text-stone-600 font-medium">
                ‚úâÔ∏è –î–∞—Ç–æ—Ç–µ–∫–∏—Ç–µ —ú–µ –±–∏–¥–∞—Ç –∏—Å–ø—Ä–∞—Ç–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–Ω–æ –Ω–∞ –º–µ—ò–ª!
              </p>
              <p className="text-xs text-stone-500 mt-1">
                –ù–∏–≤–Ω–∞—Ç–∞ —Ä–∞–¥–æ—Å—Ç —ú–µ –±–∏–¥–µ —É—à—Ç–µ –ø–æ–≥–æ–ª–µ–º–∞ –∫–æ–≥–∞ —ú–µ –≥–∏ —Å–ø–æ–¥–µ–ª–∏—Ç–µ –≤–∞—à–∏—Ç–µ –º–æ–º–µ–Ω—Ç–∏ —Å–æ –Ω–∏–≤! üéâ
              </p>
            </div>
          </CardFooter>
        </form>
      </Card>
    </div>
  )
}