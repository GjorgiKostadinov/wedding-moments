import { NextRequest, NextResponse } from 'next/server'
import { getWeddingBySlug } from '@/lib/wedding-data'
import { sendWeddingMoment } from '@/lib/email'

// Gmail –ª–∏–º–∏—Ç–∏
const MAX_FILE_SIZE = 10 * 1024 * 1024 // 10MB –ø–æ —Ñ–∞—ò–ª
const MAX_EMAIL_SIZE = 25 * 1024 * 1024 // 25MB –≤–∫—É–ø–Ω–æ –∑–∞ Gmail

export async function POST(request: NextRequest) {
  console.log('üîµ API –ø–æ–≤–∏–∫ –∑–∞–ø–æ—á–Ω–∞—Ç...')
  
  try {
    const formData = await request.formData()
    
    const weddingSlug = formData.get('weddingSlug') as string
    const guestName = formData.get('guestName') as string
    const message = formData.get('message') as string
    const files = formData.getAll('files') as File[]

    console.log('üìß Wedding slug:', weddingSlug)
    console.log('üë§ Guest name:', guestName)
    console.log('üìÅ Files count:', files.length)

    // –û—Å–Ω–æ–≤–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—ò–∞
    if (!weddingSlug || !guestName || files.length === 0) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—Å–∫–∞ –≥—Ä–µ—à–∫–∞')
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Å—É–≤–∞–∞—Ç –ø–æ—Ç—Ä–µ–±–Ω–∏ –ø–æ–ª–∏—ö–∞' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ Gmail –ª–∏–º–∏—Ç–∏
    let totalSize = 0
    
    for (const file of files) {
      const sizeMB = Math.round(file.size / 1024 / 1024 * 100) / 100
      console.log(`üìÑ ${file.name}: ${sizeMB}MB`)
      
      if (file.size > MAX_FILE_SIZE) {
        console.log(`‚ùå –§–∞—ò–ª–æ—Ç ${file.name} –µ –ø—Ä–µ–≥–æ–ª–µ–º: ${sizeMB}MB`)
        return NextResponse.json(
          { 
            success: false, 
            error: `–§–∞—ò–ª–æ—Ç "${file.name}" –µ –ø—Ä–µ–≥–æ–ª–µ–º (${sizeMB}MB). –ú–∞–∫—Å–∏–º—É–º 10MB –ø–æ —Ñ–∞—ò–ª.` 
          },
          { status: 413 }
        )
      }
      
      totalSize += file.size
    }

    const totalMB = Math.round(totalSize / 1024 / 1024 * 100) / 100
    console.log(`üìä –í–∫—É–ø–µ–Ω —Ä–∞–∑–º–µ—Ä: ${totalMB}MB`)

    if (totalSize > MAX_EMAIL_SIZE) {
      console.log(`‚ùå –ü—Ä–µ–º–Ω–æ–≥—É –≥–æ–ª–µ–º–æ –∑–∞ Gmail: ${totalMB}MB`)
      return NextResponse.json(
        { 
          success: false, 
          error: `–í–∫—É–ø–Ω–∏–æ—Ç —Ä–∞–∑–º–µ—Ä (${totalMB}MB) –µ –ø—Ä–µ–≥–æ–ª–µ–º –∑–∞ Gmail. –ú–∞–∫—Å–∏–º—É–º 25MB.` 
        },
        { status: 413 }
      )
    }

    // –ù–∞—ò–¥–∏ —Å–≤–∞–¥–±–∞
    console.log('üîç –ë–∞—Ä–∞–º —Å–≤–∞–¥–±–∞...')
    const wedding = await getWeddingBySlug(weddingSlug)
    if (!wedding) {
      console.log('‚ùå –°–≤–∞–¥–±–∞—Ç–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞')
      return NextResponse.json(
        { success: false, error: '–°–≤–∞–¥–±–∞—Ç–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞' },
        { status: 404 }
      )
    }

    console.log('‚úÖ –°–≤–∞–¥–±–∞ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞:', wedding.title)

    // –ü—Ä–æ—Ü–µ—Å–∏—Ä–∞—ò —Ñ–∞—ò–ª–æ–≤–∏
    console.log('üìé –ü—Ä–æ—Ü–µ—Å–∏—Ä–∞–º —Ñ–∞—ò–ª–æ–≤–∏...')
    const attachments = []
    
    for (const file of files) {
      console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç—É–≤–∞–º: ${file.name}`)
      
      try {
        const arrayBuffer = await file.arrayBuffer()
        const buffer = Buffer.from(arrayBuffer)
        
        attachments.push({
          filename: file.name,
          content: buffer,
          contentType: file.type || 'application/octet-stream'
        })
        
        console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${file.name}`)
      } catch (fileError) {
        console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ ${file.name}:`, fileError)
        return NextResponse.json(
          { success: false, error: `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ "${file.name}"` },
          { status: 500 }
        )
      }
    }

    // –ò—Å–ø—Ä–∞—Ç–∏ –º–µ—ò–ª
    console.log('üì§ –ò—Å–ø—Ä–∞—ú–∞–º –º–µ—ò–ª –ø—Ä–µ–∫—É Gmail...')
    
    const result = await sendWeddingMoment({
      weddingTitle: wedding.title,
      coupleEmail: wedding.coupleEmail,
      coupleNames: wedding.coupleNames,
      guestName,
      message: message || undefined,
      attachments
    })

    if (result.success) {
      console.log(`üéâ –£—Å–ø–µ—Ö! Message ID: ${result.messageId}`)
      
      return NextResponse.json({ 
        success: true, 
        message: '–ú–æ–º–µ–Ω—Ç–∞ –µ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞—Ç–µ–Ω!',
        messageId: result.messageId,
        totalSize: totalMB + 'MB'
      })
    } else {
      console.log('‚ùå Gmail –≥—Ä–µ—à–∫–∞:', result.error)
      return NextResponse.json(
        { success: false, error: `Gmail –≥—Ä–µ—à–∫–∞: ${result.error}` },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('üí• API Error:', error)
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω–∞—Ç—Ä–µ—à–Ω–∞ –≥—Ä–µ—à–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ—Ç'
      },
      { status: 500 }
    )
  }
}